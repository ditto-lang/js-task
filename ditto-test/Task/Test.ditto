module Task.Test exports (
    main,
)

import (js-exception) Error
import (js-exception) Exception

import (std) Array
import (std) Effect
import (std) Int
import (std) Maybe (
    Maybe(..),
)
import (std) Never (
    Never,
)
import (std) Result (
    Result(..),
)

import Task (
    Task,
)


type alias Log = (String) -> Effect(Unit)

type alias LogTask = (String) -> Task(Unit, String)

task_one = fn (log: LogTask): Task(Unit, String) ->
    log("task one: sleeping for 2 seconds")
    |> Task.and_then(fn (_) -> sleep(Task.Seconds(2)))
    |> Task.and_then(fn (_) -> log("task one: done"))

task_two = fn (log: LogTask): Task(Unit, String) ->
    log("task two: sleeping for 4 seconds")
    |> Task.and_then(fn (_) -> sleep(Task.Seconds(4)))
    |> Task.and_then(fn (_) -> log("task two: done"))

task_three = fn (log: LogTask): Task(Unit, String) ->
    log("task three: sleeping for 10 seconds with 1 second timeout")
    |> Task.and_then(
        fn (_) ->
            sleep(Task.Seconds(10))
            |> Task.with_timeout(Task.Seconds(1)),
    )
    |> Task.and_then(
        fn (timed_out) ->
            match timed_out with
            | Nothing -> log("task three: timed out")
            | Just(_) -> Task.fail("task three: didn't time out?")
            end,
    )

task_four = fn (log: LogTask): Task(Unit, String) ->
    let
        max_retries = 2
    in
    Task.with_retry(
        max_retries,
        fn (retries) ->
            -- TODO: use literal pattern matching here when it's implemented
            if Int.is_eq(retries, 0) then
                log("task four: first attempt")
                |> Task.and_then(fn (_) -> Task.fail("nope"))
            else
                log("task four: retry")
                |> Task.and_then(
                    fn (_) ->
                        Task.sleep(
                            -- Exponential backoff ðŸ‘Œ
                            Task.Seconds(pow_impl(2, retries)),
                        )
                        |> Task.map_err(Never.unreachable),
                )
                |> Task.and_then(
                    fn (_) ->
                        if Int.is_eq(retries, max_retries) then
                            Task.succeed(unit)
                        else
                            Task.fail("nope"),
                ),
    )

main = fn (log: Log): Effect(Unit) -> do {
    let fail = Exception.throw(Error.new("tests failed", { cause = Nothing }));
    let log_task: LogTask = fn (message) ->
        Task.from_effect(log(message))
        |> Task.map_err(fn (_) -> "log failed!?");
    let tasks = [
        task_one(log_task),
        task_two(log_task),
        task_three(log_task),
        task_four(log_task),
    ];
    Task.fork(
        Task.all_unbounded(tasks),
        fn (result) ->
            match result with
            | Ok(results) ->
                if Array.is_empty(results.errs) then Effect.noop else fail
            | Err(_) -> fail
            end,
    );
    cancel <- Task.fork(
        sleep(Task.Seconds(20)),
        fn (result) ->
            match result with
            | Ok(_) -> fail
            | Err(_) -> fail
            end,
    );
    cancel;
    return unit
}

sleep = fn (duration): Task(Unit, e) ->
    Task.sleep(duration)
    |> Task.map_err(Never.unreachable)

-- TODO: add to std
foreign pow_impl: (Int, Int) -> Int
